#!/usr/bin/env python
PACKAGE = "sr_point_cloud"

from dynamic_reconfigure.parameter_generator_catkin import *
from math import pi

gen = ParameterGenerator()

# Note, these are described in: /usr/include/pcl-1.7/pcl/surface/gp3.h

gen.add("mu", double_t, 0,
        "The multiplier of the nearest neighbor distance to obtain the final "
        "search radius for each point this will make the algorithm adapt to "
        "different point densities in the cloud.",
        2.5, 0.00, 20)

gen.add("maximum_nearest_neighbors", int_t, 0,
    "The maximum number of nearest neighbors to be searched for.", 100, 0, 1000);

gen.add("maximum_surface_angle", double_t, 0,
       "Radians. Don't consider points for triangulation if their normal deviates more "
       "than this value from the query point's normal.  Note: As normal "
       "estimation methods usually give smooth transitions at sharp edges, this "
       "ensures correct triangulation by avoiding connecting points from one "
       "side to points from the other through forcing the use of the edge "
       "points. ",
       pi/4.0, 0.0, 2*pi ); # 45 degrees

gen.add("minimum_angle", double_t, 0,
      "Radians. Minimum angle each triangle should have. "
      "Note: As this is a greedy approach, this will have to be violated from time to time.",
      pi/18, 0.0, 2*pi); # 10 degrees

gen.add("maximum_angle", double_t, 0,
        "Radians. Maximum angle each triangle can have. "
        "Note: For best results, its value should be around 120 degrees",
        2*pi/3, 0.0, 2*pi); # 120 degrees

exit(gen.generate(PACKAGE, "cloud_triangulator", "Triangulator"))

# vim: ft=python
