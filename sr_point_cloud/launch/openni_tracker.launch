<launch>
    <!-- set to false if you don't want to start the kinect -->
    <arg name="kinect" default="true"/>
    <!-- This is a GSC specific config. Set to true to remove the hand from the point cloud, but that will only happen when the full GSC system is running. Set it to false as default and have the GSC launch make it true.-->
    <arg name="filtered" default="false"/>

    <!-- Pre-process the raw cloud with a voxel grid -->
    <arg name="preprocess" default="false"/>
    <!-- When pre-processing how much to downsample. More is faster but less accurate. -->
    <arg name="leaf_size" default="0.01"/>
    <!-- When pre-processing transform into this frame -->
    <arg name="output_frame" default=""/>
    <arg name="manager" default="nodelet_manager" />

    <!-- Start the OpenNI camera -->
    <group if="$(arg kinect)">
      <include file="$(find openni_launch)/launch/openni.launch">
        <arg name="depth_registration" value="true" />
        <arg if="$(arg preprocess)" name="depth_registered" value="depth_registered_unfiltered" />
      </include>
    </group>

    <!-- The output of the preprocess section is published to the /camera/depth_registered/points, so that any subsequent node will work with the preprocessed cloud -->
    <group if="$(arg preprocess)">
        <!-- Start a nodelet manager to run our constellation -->        
        <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager" output="screen" />

        <!-- VoxGrid, downsample the initial cloud for faster processing -->
        <!-- Transform cloud to side of glass -->
        <!-- Expects output_frame and leaf_size to be set -->
        <node name="voxel_grid" pkg="nodelet" type="nodelet" args="load pcl/VoxelGrid $(arg manager)">
            <remap from="~input" to="/camera/depth_registered_unfiltered/points" />
            <remap from="~output" to="/camera/depth_registered/points" />
            <param name="leaf_size" value="$(arg leaf_size)" />
            <param name="output_frame" value="$(arg output_frame)" />
            <rosparam>
                # How much to downsample the incoming raw cloud
                filter_field_name: ""
                filter_limit_min: 0.0
                filter_limit_max: 10.0
            </rosparam>
        </node>
    </group>

    <!-- start some filters on the point cloud -->
    <group if="$(arg filtered)">
      <include file="$(find sr_point_cloud)/launch/filters.launch" />
    </group>

    <!-- Tracker using NI camera feed as input cloud -->
    <node name="point_cloud_tracker" pkg="sr_point_cloud" type="tracker_rgb" output="screen">
        <remap from="~input/points" to="/filtered" if="$(arg filtered)" />
      	<remap from="~input/points" to="/camera/depth_registered/points" unless="$(arg filtered)" />
        <param name="downsample" value="false" if="$(arg preprocess)"/>
        <param name="downsample" value="true" unless="$(arg preprocess)"/>
    </node>

    <node name="point_cloud_triangulator" pkg="sr_point_cloud" type="triangulator" output="screen">
        <remap from="~input/points" to="point_cloud_tracker/result/points" />
        <remap from="~output/shape/mesh" to="point_cloud_tracker/result/mesh" />
    </node>
</launch>
